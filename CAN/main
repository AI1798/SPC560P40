#include "MPC5602P.h"

/*******************************************************************************
* Global variables
*******************************************************************************/
uint32_t  RxData[2]={0};


/*******************************************************************************
* Function prototypes
*******************************************************************************/
void disableWatchdog(void);
void SysInit(void);
void SysClkPMLLinit(void);

void CAN_0Init(void);
void Interrupts_init(void);
void CAN0_RxMsgisr(void);
void initGPIO(void);

/****************************************************************/
/*Decripition:Close WatchDog timer
/****************************************************************/
void disableWatchdog(void) 
{
	SWT.SR.R = 0x0000c520;    /* Write keys to clear soft lock bit */
	SWT.SR.R = 0x0000d928; 
	SWT.CR.R = 0x8000010A;    /* Clear watchdog enable (WEN) */
} 

/****************************************************************/
/*Decripition:SysInit
/****************************************************************/
void SysInit(void) 
{
	/* SSCM initialization. Setting up the most restrictive handling of
     invalid accesses to peripherals.*/
	SSCM.ERROR.R	= 0x0002;
	 /* RGM errors clearing.*/
  	RGM.FES.R         = 0xFFFF;
  	RGM.DES.R         = 0xFFFF;
}

/****************************************************************/
/*Decripition:Clock Inint
/****************************************************************/
void SysClkPMLLinit(void)
{
	CGM.OCEN.B.EN 								= 0; 	// output clk disenable
	/*PAGE124*/
	CGM.OSC_CTL.B.OSCBYP						= 1;	//  EXTAL is used as root clock.

  CGM.FMPLL[0].CR.B.IDF					= 2;	// The value of this field sets the PLL input division factor.
	CGM.FMPLL[0].CR.B.ODF					=	1;	// The value of this field sets the PLL output division factor.
	CGM.FMPLL[0].CR.B.NDIV				=	64;	// The value of this field sets the PLL loop division factor.
	CGM.FMPLL[0].CR.B.EN_PLL_SW		= 1;	// This bit is used to enable progressive clock switching.
	/*PAGE103*/
  	CGM.FMPLL[0].MR.R			=0;
  	
  		/* Run modes initialization.*/
  	ME.IS.R           = 8;                        /* Resetting I_ICONF status.*/
  	ME.MER.R = 0x0000001D;          // Enable DRUN, RUN0, SAFE, RESET modes 
  	/*PAGE152*/
  	ME.DRUN.B.DFLAON							= 3;	// 0x11 Data flash is in normal mode
	ME.DRUN.B.CFLAON							= 3;	// 0x11 Code flash is in normal mode
	ME.DRUN.B.PLL1ON							= 1;	// 0x1 system PLL is switched on
	ME.DRUN.B.XOSC0ON							= 1;	// 0x1 4 MHz crystal oscillator is switched on
	ME.DRUN.B.IRCON								= 1;	// 0x1 16 MHz internal RC oscillator is switched on
	ME.DRUN.B.SYSCLK							= 4;	// 0x0100 system PLL
	/*PAGE163*/
  	ME.DRUN.R									= 0x000F0074;
  	/*PAGE163*/
  	ME.SAFE.R									= 0x000F0074;
  	ME.RUN[0].R									= 0x000F0074;
 	/*PAGE163*/
 	ME.RUNPC[0].R = 0x000000FF; /* enable peripherals run in all modes */
	/*PAGE166*/
	ME.LPPC[0].R = 0x00000500;
	/*PAGE167*/
	
	CGM.OCDSSC.B.SELDIV						= 1;	// output selected Output Clock divided by 2
	CGM.OCDSSC.B.SELCTL						= 2;	// 0x0010 system PLL
	/*PAGE126*/
	
	CFLASH.PFCR0.B.BK0_APC  = 2;
  	CFLASH.PFCR0.B.BK0_RWSC = 2;
  	
	CGM.CMU_0_CSR.B.CME_A					= 0;	// FMPLL_0 clock monitor disenable
	CGM.CMU_0_CSR.B.RCDIV					= 0;	// RC clock division by 1(no division)
	/*PAGE112*/

	/*PAGE150*/
	CGM.OCEN.B.EN 								= 1; 	// output clk enable
	/*PAGE124*/
	while (ME.GS.B.S_MTRANS) {} ;			//Wait for mode transition to complete

}

/***************************************************************/
/*Decripition:CAN_0Init
/****************************************************************/
void CAN_0Init(void) 
{
	uint8_t   i;
	CAN_0.MCR.B.MDIS			= 1;			// disenable the FlexCAN module
	CAN_0.MCR.B.MAXMB			= 63;			// Maximum Number of Message Buffers
	/*PAG545*/
	CAN_0.CR.B.PRESDIV			= 3;			// Prescaler Division Factor
	CAN_0.CR.B.RJW          = 1;
	CAN_0.CR.B.PSEG1			= 4;			// Phase Buffer Segment 1 in the bit time
	CAN_0.CR.B.PSEG2			= 7;			// Phase Buffer Segment 2 in the bit time
	CAN_0.CR.B.PROPSEG			= 2;			// Phase Buffer Segment 2 in the bit time
	CAN_0.CR.B.CLKSRC      = 1;
	/*PAG546*/
	for (i=0; i<64; i++) 
	{
		CAN_0.BUF[i].CS.B.CODE	= 0;			// Inactivate all message buffers
	}
	CAN_0.BUF[0].CS.B.CODE		= 8;			// Message Buffer 0 set to TX INACTIVE

	CAN_0.BUF[1].CS.B.CODE		= 4;			// Message Buffer 1 set to RX EMPTY

	/*PAG537*/
	CAN_0.RXGMASK.R				= 0xFFFFFFFF;	// Global acceptance mask 
	CAN_0.RX14MASK.R      = 0xFFFFFFFF;
	//CAN_0.RX15MASK.R      = 0xFFFFFFFF;
	/*PAG550*/
	//CAN_0.IMRL.R				= 2;			// 中断屏蔽寄存器，允许1#MB(RX_MB)产生中断

	CAN_0.MCR.R = 0x0000001F;       /* Negate FlexCAN 0 halt state for 21 MB */
	/*PAG545*/
}

/***************************************************************/
/*Decripition:Transmit Can Msg
/****************************************************************/
void TransmitMsg(void) 
{
  /* Assumption:  Message buffer CODE is INACTIVE */
  CAN_0.BUF[0].CS.B.IDE		= 1;			// Frame format is extended
	CAN_0.BUF[0].CS.B.LENGTH	= 8;			// Frame format is extended
	CAN_0.BUF[0].ID.B.PRIO		= 0;			// CAN消息优先级,包含在ID.R中
	CAN_0.BUF[0].ID.R		= 0x1C320004;	// CAN消息ID
	/*PAG537*/
  CAN_0.BUF[0].DATA.W[0] = 0xFAFBFCFD;
  CAN_0.BUF[0].DATA.W[0] = 0xFDFCFBFA;

  
  CAN_0.BUF[0].CS.B.CODE = 0xC;         // Activate msg. buf. to transmit data frame 
  
  //while ( CAN_0.IFRL.B.BUF00I == 0) { } // wait until the tx is completed.
//  CAN_0.IFRL.R = 0x00000001; 
}

/***************************************************************/
/*Decripition:Interrupts function & INTC priority definition
/****************************************************************/
void Interrupts_init(void) 
{

	/* Initialize interrupts and exceptions */
	INTC_InstallINTCInterruptHandler(CAN0_RxMsgisr, 68, 3); 
	/*PAGE223*/
	/* lower current INTC priority to start INTC interrupts */
	INTC.CPR.R = 0;
	/*PAGE213*/
}

/***************************************************************/
/*Decripition:RX_MB收到新的CAN消息
/****************************************************************/
void CAN0_RxMsgisr(void)
{
	CAN_0.BUF[1].CS.B.IDE		= 1;			// Frame format is extended
	CAN_0.BUF[1].CS.B.LENGTH	= 8;			// Frame format is extended
	CAN_0.BUF[1].ID.B.PRIO		= 1;			// CAN消息优先级,包含在ID.R中
	if(CAN_0.BUF[1].ID.R == 0x38330004)
	{
		RxData[0] = CAN_0.BUF[1].DATA.W[0];
		RxData[1] = CAN_0.BUF[1].DATA.W[1];
	}
	CAN_0.IFRL.R			= 0;	// 清除中断标志位
	/*PAGE558*/
}


/***************************************************************/
/*Decripition:init MCU GPIO
/****************************************************************/
void initGPIO(void)
{
  SIU.PCR [15].B.PA						= 0;	// Set as GPIO
	SIU.PCR [15].B.OBE					= 1;	// Set as OutPut 
	SIU.GPDO[15].B.PDO					= 0; 	// 默认低电平
	
	SIU.PCR [16].B.PA						= 1;
	SIU.PCR [16].B.OBE						= 1;
	SIU.PCR [16].B.SRC						= 1;
	/*PAGE258*/
	SIU.PCR [17].B.PA						= 2;	// Set as FlexCAN_0 RXD
	SIU.PCR [17].B.IBE						= 1;	// Input buffer of the pad enabled
}

/***************************************************************/
/*Decripition: MAIN
/****************************************************************/
int main(void)
{
	disableWatchdog();
	SysInit();
	SysClkPMLLinit();
	
	Interrupts_init();
	initGPIO();
	CAN_0Init();
		TransmitMsg();						// 按照时间间隔发送
	while(1)
	{
		uint16_t  i=0;
		for(i=0;i<10000;i++)
		{
		}
	
		if(CAN_0.ESR.B.IDLE==1)
		{
		  SIU.GPDO[15].B.PDO				^= 1;
		}
		
	}
}



