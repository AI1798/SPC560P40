#include "MPC5602P.h"
#include "IntcInterrupts.h"



/*******************************************************************************
* Function prototypes
*******************************************************************************/
void disableWatchdog(void);
void SysInit(void);
void SysClkPMLLinit(void);
void Interrupts_init(void);
void PIT0_isr(void);
void PIT0_init(void);
void initGPIO(void);

/****************************************************************/
/*Decripition:Close WatchDog timer
/****************************************************************/
void disableWatchdog(void) 
{
	SWT.SR.R = 0x0000c520;    /* Write keys to clear soft lock bit */
	SWT.SR.R = 0x0000d928; 
	SWT.CR.R = 0x8000010A;    /* Clear watchdog enable (WEN) */
} 

void SysInit(void) 
{
	/* SSCM initialization. Setting up the most restrictive handling of
     invalid accesses to peripherals.*/
	SSCM.ERROR.R	= 0x0002;
	 /* RGM errors clearing.*/
  	RGM.FES.R         = 0xFFFF;
  	RGM.DES.R         = 0xFFFF;
} 


/****************************************************************/
/*Decripition:Clock Inint
/****************************************************************/
void SysClkPMLLinit(void)
{
	CGM.OCEN.B.EN 								= 0; 	// output clk disenable
	/*PAGE124*/
	CGM.OSC_CTL.B.OSCBYP						= 1;	//  EXTAL is used as root clock.

  	CGM.FMPLL[0].CR.B.IDF					= 2;	// The value of this field sets the PLL input division factor.
	CGM.FMPLL[0].CR.B.ODF					=	1;	// The value of this field sets the PLL output division factor.
	CGM.FMPLL[0].CR.B.NDIV				=	32;	// The value of this field sets the PLL loop division factor.
	CGM.FMPLL[0].CR.B.EN_PLL_SW		= 1;	// This bit is used to enable progressive clock switching.
	/*PAGE103*/
  	CGM.FMPLL[0].MR.R			=0;
  	
  		/* Run modes initialization.*/
  	ME.IS.R           = 8;                        /* Resetting I_ICONF status.*/
  	ME.MER.R = 0x0000001D;          // Enable DRUN, RUN0, SAFE, RESET modes 
  	/*PAGE152*/
  	ME.DRUN.B.DFLAON							= 3;	// 0x11 Data flash is in normal mode
	ME.DRUN.B.CFLAON							= 3;	// 0x11 Code flash is in normal mode
	ME.DRUN.B.PLL1ON							= 1;	// 0x1 system PLL is switched on
	ME.DRUN.B.XOSC0ON							= 1;	// 0x1 4 MHz crystal oscillator is switched on
	ME.DRUN.B.IRCON								= 1;	// 0x1 16 MHz internal RC oscillator is switched on
	ME.DRUN.B.SYSCLK							= 4;	// 0x0100 system PLL
	/*PAGE163*/
  	ME.DRUN.R									= 0x000F0074;
  	/*PAGE163*/
  	ME.SAFE.R									= 0x000F0074;
  	ME.RUN[0].R									= 0x000F0074;
 	/*PAGE163*/
 	ME.RUNPC[0].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[1].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[2].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[3].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[4].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[5].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[6].R = 0x000000FF; /* enable peripherals run in all modes */
 	ME.RUNPC[7].R = 0x000000FF; /* enable peripherals run in all modes */
	/*PAGE166*/
	ME.LPPC[0].R = 0x00000500;
  	ME.LPPC[1].R = 0x00000500;
  	ME.LPPC[2].R = 0x00000500;
	ME.LPPC[3].R = 0x00000500;
	ME.LPPC[4].R = 0x00000500;
	ME.LPPC[5].R = 0x00000500;
	ME.LPPC[6].R = 0x00000500;
	ME.LPPC[7].R = 0x00000500;
	/*PAGE167*/
	
	CGM.OCDSSC.B.SELDIV						= 1;	// output selected Output Clock divided by 2
	CGM.OCDSSC.B.SELCTL						= 2;	// 0x0010 system PLL
	/*PAGE126*/
	
	CFLASH.PFCR0.B.BK0_APC  = 2;
  	CFLASH.PFCR0.B.BK0_RWSC = 2;
  	
	CGM.CMU_0_CSR.B.CME_A					= 0;	// FMPLL_0 clock monitor disenable
	CGM.CMU_0_CSR.B.RCDIV					= 0;	// RC clock division by 1(no division)
	/*PAGE112*/

//	ME.MCTL.R									= 0x40005AF0;
//	ME.MCTL.R									= 0x3000A50F;
	/*PAGE150*/
	CGM.OCEN.B.EN 								= 1; 	// output clk enable
	/*PAGE124*/
	while (ME.GS.B.S_MTRANS) {} ;			//Wait for mode transition to complete
//	while(ME.GS.B.S_CURRENTMODE != 0x3 ){};
	//ME_GS Check RUN0 mode has successfully been entered
	/*PAGE147*/
}

/***************************************************************/
/*Decripition:Interrupts function & INTC priority definition
/****************************************************************/
void Interrupts_init(void) 
{
   /* Initialize interrupts and exceptions */
	 INTC_InstallINTCInterruptHandler(PIT0_isr, 59, 3); 

   /* lower current INTC priority to start INTC interrupts */
   INTC.CPR.R = 0;
	 /*PAGE213*/
}

/****************************************************************/
/*Decripition:Interrupts function
/****************************************************************/
void PIT0_isr(void)
{
 	PIT.CH[0].TFLG.B.TIF 		= 1;  // 清空中断标志位
	/*PAGE787*/
    /* toggle LED */
    SIU.GPDO[8].B.PDO 			^= 1;

   
}


/***************************************************************/
/*Decripition:init PIT0
/****************************************************************/
void PIT0_init(void)
{
	ME.PCTL[92].R	=0;
	PIT.PITMCR.R							= 0;			
	/*PAGE783*/
	PIT.CH[0].LDVAL.R							= 10000;	// set the timer start value
	/*PAGE784*/
	PIT.CH[0].CVAL.R							= 10000;	// set the timer start value	
	/*PAGE785*/
	PIT.CH[0].TCTRL.R 						= 0x00000003;				//  Interrupt will be requested whenever TIF is set
	/*PAGE786*/
	PIT.CH[0].TFLG.B.TIF 		= 1;  // 清空中断标志位
		/*PAGE787*/
		


}

/***************************************************************/
/*Decripition:init MCU GPIO
/****************************************************************/
void initGPIO(void)
{
	SIU.PCR [8].B.PA						= 0;  // Set as GPIO
	SIU.PCR [8].B.OBE						= 1;  // Set as OutPut 
	SIU.GPDO[8].B.PDO						= 0; 	// DeLighting as default
		
	SIU.PCR [7].B.PA							= 0;  // Set as GPIO
	SIU.PCR [7].B.OBE						= 1;  // Set as OutPut 
	SIU.GPDO[7].B.PDO						= 0; 	// DeLighting as default
}

/***************************************************************/
/*Decripition: MAIN
/****************************************************************/
int main(void)
{
	disableWatchdog();
	SysInit();
	SysClkPMLLinit();
	PIT0_init();
	Interrupts_init();
	initGPIO();
	while(1)
	{
		int16_t i=0;
		if(PIT.CH[0].CVAL.R>9000)
		{
			SIU.GPDO[7].B.PDO  = 1; 
		}
		else
		{
			for(i=0;i<10000;i++)
			{
			
			}
			SIU.GPDO[7].B.PDO  ^= 1;
		}
	}
}



